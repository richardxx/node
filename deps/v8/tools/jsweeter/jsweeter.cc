/*
 * We process the log file generated by V8 --trace-*-internals.
 * We do visualize and data mining on the log file.
 * By richardxx, 2013.7
 */

#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <string>
#include <unistd.h>
#include "options.h"
#include "modeler.hh"

const char* input_file = NULL;
const char* visual_file = NULL;
const char* slice_sig = NULL;
bool debug_mode = false;
int draw_mode = DRAW_OBJECTS_ONLY;
int states_count_limit = 10;
bool do_analyze = false;


static void
print_help(const char* prog_name)
{
  printf( "Usage: %s [options] input_file\n", prog_name );
  printf( "Options:\n");
  printf( "-a                   : Analyze the deoptimizations.\n" );
  printf( "-c [default=10]      : Only output the machines have at least c states.\n" );
  printf( "-d                   : Specify the type of automata for drawing\n" );
  printf( "                     : 0 = objects automata only (default)\n" );
  printf( "                     : 1 = closures automata only\n" );
  printf( "                     : 2 = both\n" );
  printf( "-v [file]            : Output graphviz file for visualization.\n" );
  printf( "-s [signature]       : Output the graphviz description for the function/object with specified signature.\n" );
  printf( "-D                   : Debug mode open.\n" );
  printf( "-h                   : Print this help.\n" );
}


static int 
parse_options(int argc, char** argv)
{
  int c;
  
  while ( (c = getopt(argc, argv, "ac:d:Dv:s:h") ) != -1 ) {
    switch(c) {
    case 'a':
      do_analyze = true;
      break;

    case 'c':
      states_count_limit = atoi(optarg);
      break;
      
    case 'd':
      draw_mode = atoi(optarg);
      break;

    case 'D':
      debug_mode = true;
      break;

    case 'v':
      visual_file = optarg;
      break;
      
    case 's':
      slice_sig = optarg;
      break;

    case 'h':
      print_help(argv[0]);
      return 0;
    }
  }

  if ( optind == argc ) {
    printf( "Missing input file. Aborted.\n" );
    print_help( argv[0] );
    return 0;
  }

  input_file = argv[optind];
  return 1;
}


int main(int argc, char** argv)
{
  if ( parse_options(argc, argv) == 0 )
    return -1;

  if ( !build_automata(input_file) ) {
    printf( "Error in building automata, stop.\n" );
    return -1;
  }
  
  if ( visual_file != NULL )
    visualize_machines(visual_file);
  
  clean_machines();

  return 0;
}
